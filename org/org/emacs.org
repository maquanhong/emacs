#+TITLE: emacs 笔记

#+OPTIONS: ^:nil


* 配置emacs记录
emacs主要用来
- 记笔记
- python 
- C/C++

使用到的插件
- elget：用来自动安装el文件
- color-theme： emacs配色
- dired： emacs的目录
- linum： 行号
- grep：grep-find 查找功能
- borwse-kill-ring：剪切板记录
- ido：C-x C-f的时候，提示
- tramp：用来在emacs中使用root权限打开文件
- org：orgmode 用来记笔记
- cedet 和 ecb：cedet是安装ecb的基础，ecb是据说很好的浏览代码工具，实验中
- cscope： 也是用来浏览代码的。可以实现C/C++代码中函数、变量的跳转
- auto-complete & yasnippet：通用的自动补全工具
- auto-complete-clang：配合auto-complete来实现c/c++的代码补全，函数参数提示等
- jedi：python的代码补全工具
- ipython：python的命令行提示工具



** 使用el-get.el 来安装所有（几乎所有）el文件。

安装elget需要有git。
安装master版本比较好。
https://github.com/dimitri/el-get

** 记笔记就用org-mode了。
emacs自带的org即可，配置文件就是lisps目录中的org-mode-settings.el

** emacs 配置 python
 可以使用jedi来替代之前到rope / ropemacs /ropemode  组合。
*** 使用el-get.el 安装jedi
地址：https://github.com/davidhalter/jedi
在ubuntu中安装好需要到软件之后，直接在M-x el-get-install RET jedi即可安装成功。

在mac中。需要在系统自带的命令行中,jedi的目录中执行 make requestments 。之后在安装。 其他到基本和ubuntu一样。

*** 需要用到ipython.el python-mode.el。

ipython可以通过easy_install 安装。同时需要安装readline。
sudo easy_install ipython readline

python-mode可以在[[https://launchpad.net/python-mode/][官网]] 直接下载使用。


配置文件就看lisps\python\init_python.el init_ipython.el init_initjedi.el

** emacs 中安装auto-complete 和 auto-complete-clang
可以查看 [[http://blog.csdn.net/winterttr/article/details/7524336][ emacs中使用auto-complete的详细设置]]

[[http://blog.csdn.net/winterttr/article/details/7273345][ emacs下使用clang补全C++]]
[[http://blog.csdn.net/cherylnatsu/article/details/7670445][Emacs+auto-complete+clang进行代码补全]]

M-x el-get-install RET auto-complete 
M-x el-get-install RET popup
M-x el-get-install RET fuzzy
M-x el-get-install RET pos-tip
M-x el-get-install RET auto-complete-clang
使用上面命令，可以直接用el-get安装。
- auto-complete:是auto-complete的主要源码
- popup: auto-complete的popup列表
- fuzzy: auto-complete的模糊查找功能
- pos-tip: 用来调整popup函数提示信息的位置。
- auto-complete-clang:配合auto-complete的C/C++自动补全插件。
    需要在机器中安装clang工具。
mac上好像自带clang

ubuntu上使用apt-get install clang 可以安装。


@<font color="#ff0000">echo "" | g++ -v -x c++ -E -   可以得到系统中所有的头文件目录@</font>


配置文件就看init_initjede.el了。

** emacs Mac中安装Cscope
- 在http://cscope.sourceforge.net 中下载最新版本
- 解压
- 修改cscope 源文件
    - vim src/constants.h
    - 在111行后添加
         #undef TERMINFO
         #define TERMINFO
- ./configure && make && make install
** emacs 使用Cscope
生成索引文件才能使用Cscope的强大功能。
1.  首先需要在源码根目录执行
    #+begin_src c
    cscope-indexer -r
    #+end_src
    -r 表示递归检索子目录。会生成2个文件
    - cscope.files：文件列表。即根目录下所有文件名
    - cscope.out：数据库
1.  一般执行上一步之后就足够了，项目中的所有源文件都在文件列表里了。但不能跳转到/usr/include目录。如：想看到printf函数的定义，需要跳转到/usr/include/printf.h文件。
    这时就需要手动把/usr/include下的.h文件都添加到cscope.files文件中。
    使用
    #+begin_src c
      find /usr/include -name "*.h" -o -name "*.c" -o -name "*.cc"  -o -name "*.cpp" -o -name "*.hpp" > cscope.files
    #+end_src
    然后执行下一步
1.  使用cscope -Rb 重新生成cscope.out文件。
    - -R: 在生成索引文件时，搜索子目录树中的代码
    - -b: 只生成索引文件，不进入cscope的界面
    - -k: 在生成索引文件时，不搜索/usr/include目录
    - -q: 生成cscope.in.out和cscope.po.out文件，加快cscope的索引速度
    - -i: 如果保存文件列表的文件名不是cscope.files时，需要加此选项告诉cscope到哪儿去找源文件列表。可以使用“-”，表示由标准输入获得文件列表。
    - -I dir: 在-I选项指出的目录中查找头文件
    - -u: 扫描所有文件，重新生成交叉索引文件
    - -C: 在搜索时忽略大小写
    - -P path: 在以相对路径表示的文件前加上的path，这样，你不用切换到你数据库文件所在的目录也可以使用它了
    Cscope只在第一次解析时扫描全部文件，以后再调用cscope，它只扫描那些改动过的文件，这大大提高了cscope生成索引的速度。 
    在缺省情况下，cscope在生成数据库后就会进入它自己的查询界面，我们一般不用这个界面，所以使用了“-b”选项。如果你已经进入了这个界面，按CTRL-D退出。

    Cscope在生成数据库中，在你的项目目录中未找到的头文件，会自动到/usr/include目录中查找。如果你想阻止它这样做，使用“-k”选项。

    Cscope缺省只解析C文件(.c和.h)、lex文件(.l)和yacc文件(.y)，虽然它也可以支持C++以及Java，但它在扫描目录时会跳过 C++及Java后缀的文件。如果你希望cscope解析C++或Java文件，需要把这些文件的名字和路径保存在一个名为cscope.files的文 件。当cscope发现在当前目录中存在cscope.files时，就会为cscope.files中列出的所有文件生成索引数据库。
    #+begin_src c
      find /usr/include -name "*.h" -o -name "*.c" -o -name "*.cc"  -o -name "*.cpp" -o -name "*.hpp" > cscope.files
      cscope -bkq -i cscope.files   
     #+end_src

1. Cscope默认在每次进行查找时更新cscope.out。当工程十分庞大时，建议关闭该选项以提高查找速度。方法是在~/.emacs文件中加入
    #+begin_src c  
    (setq cscope-do-not-update-database t)
    #+end_src
1. Cscope可以通过创建反向索引加速查找，方法是调用Cscope时，使用-q参数。真的假的，一试便知。修改cscope-indexer脚本，将
    cscope -b -i $LIST_FILE -f $DATABASE_FILE
    替换为
    cscope -q -b -i $LIST_FILE -f $DATABASE_FILE


@<font color="#ff0000">有的时候会出现建立完索引之后也不能用cscope进行查找，这是可以看看在.c文件的目录中是不是也包含cscope.out这个文件。它会覆盖掉根目录下的cscope.out。导致cscope只在当前目录查找。@</font>


* org-Mode
- TAB	 	折叠列表项
- M-RET	 	插入项
- M-S-RET	 	插入带复选框的项
- M-S-UP/DOWN	 	移动列表项
- M-LEFT/RIGHT	 	升/降级列表项，不包括子项
- M-S-LEFT/RIGTH	 	升/降级列表项，包括子项
- C-c C-c	 	改变复选框状态
- C-c -	 	更换列表标记（循环切换


 
| 快捷键         | 命令 | 说明                      |
|                |      |                           |
| TAB            |      | 折叠列表项                |
| M-RET          |      | 插入项                    |
| M-S-RET        |      | 插入带复选框的项          |
| M-S-UP/DOWN    |      | 移动列表项                |
| M-LEFT/RIGHT   |      | 升/降级列表项，不包括子项 |
| M-S-LEFT/RIGTH |      | 升/降级列表项，包括子项   |
| C-c C-c        |      | 改变复选框状态            |
| C-c -          |      | 更换列表标记（循环切换）  |


** 在ubuntu中。执行C-c C-e会提示Can't find library org. 此时安装emacs24-el，并重启emacs即可。


* emacs 启动 daemon模式
** 在windows里面没有daemon，只能M-x server-start 来启动server，之后用emacsclient 文件名来打开新文件。
** linux(ubuntu)
要使用Emacs daemon，至少需要Emacs 23。它提供了一个emacsclient程序，用于启动客户端。

有客户端就必然要有服务端。要启动一个daemon，需要在运行emacs时加入一个–daemon参数。幸运的是，我们不用手动启动服务端，而是可以利用emacsclient的-a参数。emacsclient的-a参数用于指定连接不上服务器时使用的别的编辑器（alternate editor），当把这项留空时，它会自动启动服务端。如果不想指定-a，也可以将ALTERNATE_EDITOR环境变量设为""。除了-a参数，emacsclient还要手工指定使用终端还是X来启动。要从终端启动，需要使用-t参数：
*** 终端启动
emacsclient -t -a ""
*** X启动
emacsclient -c -a ""

** MAC OS
可以通过
*** http://www.emacswiki.org/emacs/EmacsAsDaemon     &    http://kopwei.wordpress.com/2012/12/22/在mac下配置emacs-daemon和client实现瞬间启动


把下面脚本 放到 /Library/LaunchAgents 里面，名为 gnu.emacs.daemon.plist （*.plist）. 可以在mac开机的时候启动emacs daemon，之后就可以直接在命令行调用 emacsclient 来打开文件。

#+BEGIN_SRC script

 <?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" 
        "http://www.apple.com/DTDs/PropertyList-1.0.dtd"> 
     <plist version="1.0">
      <dict> 
        <key>Label</key>
        <string>gnu.emacs.daemon</string>
        <key>ProgramArguments</key>
        <array>
          <string>/Applications/Emacs.app/Contents/MacOS/Emacs</string>
          <string>--daemon</string>
        </array>
       <key>RunAtLoad</key>
       <true/>
       <key>ServiceDescription</key>
       <string>Gnu Emacs Daemon</string>
       <key>UserName</key>
       <string>[YOUR USERNAME HERE]</string>
      </dict>
    </plist>

#+END_SRC


*** https://gist.github.com/redinger/1394910  没试过啦。

1. Open the AppleScript editor and paste the following:

#+BEGIN_SRC c

tell application "Terminal"
do shell script "/Applications/Emacs.app/Contents/MacOS/Emacs --daemon"
end tell

#+END_SRC
Save this as an Application called "Emacs Daemon" in your Applications folder

1. Add as a login item

Goto System Preferences > Accounts

With your user name selected, click on the Login Items tab
Click on the plus sign
Browse to your applications folder and find "Emacs Daemon"
Don't worry about the "hide" checkbox, since it the dock icon disappears naturally
Create the client application
Open the AppleScript editor and paste the following:

#+BEGIN_SRC c

tell application "Terminal"
try
set frameVisible to do shell script "/Applications/Emacs.app/Contents/MacOS/bin/emacsclient -e '(<= 2 (length (visible-frame-list)))'"
if frameVisible is not "t" then
do shell script "/Applications/Emacs.app/Contents/MacOS/bin/emacsclient -c -n"
end if
on error
do shell script "/Applications/Emacs.app/Contents/MacOS/Emacs --daemon"
do shell script "/Applications/Emacs.app/Contents/MacOS/bin/emacsclient -c -n"
end try
end tell
tell application "Emacs" to activate
Save this as an Application called "Emacs Client" in your Applications folder.

#+END_SRC

1. Giving the client application a proper icon

Using the Finder, navigate to your Application folder and right click on your Emacs application (not the client or daemon), and click on Show Package Contents Do the same for the Emacs Client application

Copy the Emacs.icns file from Contents/Resources of the Emacs application to the Contents/Resources of the Emacs Client application Delete applet.icns and rename Emacs.icns to applet.icns in the Emacs Client application.

*** https://github.com/doitian/dotfiles/blob/master/bin/emacs-dwim.mac 用的是这个。虽然我看不懂这个脚本的代码。

#+BEGIN_SRC c

#!/bin/bash
# Author: Ian Yang

# recommend aliases
#
# alias e=emacs-dwim
# alias et='emacs-dwim -t'
# alias en='emacs-dwim -n'

AUTOMATOR=
# AUTOMATOR=1
#   set AUTOMATOR to 1 when used in automator as Application:
#
#   1.  Create an Application in Automator
#   2.  Add an action to run Shell
#   3.  Select "pass input as arguments".
#   4.  Paste this file into the text area, and set AUTOMATOR=1
#
#   -   You can use the Application in "Open With..." or used as default handler.
#   -   You can drag a file into this Application, and the file is opened in Emacs.
#   -   You can add this Application in "System Preference -> Accounts -> Login Items" to auto
#       start Emacs daemon.
#
EMACS=/Applications/Emacs.app/Contents/MacOS/Emacs
EMACSCLIENT=/Applications/Emacs.app/Contents/MacOS/bin/emacsclient

export LC_CTYPE=zh_CN.UTF-8
export LC_ALL=

_is_emacs_daemon_started () {
  netstat -nl 2> /dev/null | awk '{print $NF}' | grep -q "emacs$UID/server"
}
_is_emacs_window_exist () {
  _is_emacs_daemon_started && \
    $EMACSCLIENT -e '(<= 2 (length (visible-frame-list)))' | grep -q -x t
}

kill_emacs () {
  if _is_emacs_daemon_started; then
    $EMACSCLIENT -e -n '(let ((desktop-save '\''if-exists)) (dolist (f (cdr-safe (reverse (frame-list)))) (delete-frame f t)) (kill-emacs "yyyyyy"))'
    if _is_emacs_daemon_started; then
      ps -u $UID -o pid,comm= | grep Emacs$ | cut -d' ' -f1 | xargs -n 1 kill
    fi
  fi
  return 0
}

main () {
  if ! _is_emacs_daemon_started; then
    if $EMACS --daemon &> /tmp/emacs$UID.log; then
      echo ' [sucess]'
    else
      echo ' [faild]'
      return 1
    fi
  fi

  local cur=$(osascript -e 'path to frontmost application as Unicode text')
  if [ "$1" = "-t" ]; then
    $EMACSCLIENT "$@"
  elif [ -z "$1" ]; then
    if ! _is_emacs_window_exist; then
      $EMACSCLIENT -n -c
    fi
    osascript -e 'tell application "Emacs" to activate'
    return 0
  else
    if ! _is_emacs_window_exist; then
      $EMACSCLIENT -n -c
    fi
    if ! echo "$*" | grep -q -e '-n'; then
      osascript -e 'tell application "Emacs" to activate'
    fi
    $EMACSCLIENT "$@"
  fi
  osascript -e "tell application \"${cur}\" to activate"
}

if [ -n "$AUTOMATOR" ]; then
  [ -n "$1" ] \
    && main -n "$@" \
    || main
else
  [ -n "$1" -a "$1" = "-q" ] \
    && kill_emacs \
    || main "$@"
fi

#+END_SRC

* emacs 关闭daemon模式
1. 在emacs外部,可以使用 emacsclient -e '(kill-emacs)' 来关闭emacs daemon
1. 在emacs内部,可以使用 kill-emacs 或者 save-buffers-kill-emacs 命令。

* emacs root权限打开文件
1. Installing and configuring
    在emacs里面添加：（emacs22版本里面已经默认添加了tramp模块）
  
  ;;tramp

     (setq tramp-default-method "scp")

     (setq tramp-auto-save-directory "~/emacs/tramp")

     (setq auto-save-file-name-transforms

    '(("\\`/[^/]*:\\(.+/\\)*\\(.*\\)" "/tmp/\\2")))

    (setq tramp-chunksize 328)

    (require 'ange-ftp)

    (require 'tramp)

2. How to use
    编辑root权限的文件：C-x C-f /su:root@localhost:/ 然后输入root密码，或者C-x C-f /sudo: 输入用户的密码

    使用ftp，ssh等可以编辑远程文件，具体可以参考：

    http://blog.donews.com/pluskid/archive/2006/05/06/858306.aspx

3. Tramp和ido的冲突
    很不幸，这个和ido.el有些冲突，找了比较久也没找到一个解决方法，只好在想使用tramp的时候使用M-x ido-mode暂时关闭ido-mode。打开需要编辑的文件后就可以继续使用ido-mode了。

* emacs 设置C语言编辑
设置c-set-style可以制定类似tab/4空格 缩进，大括号缩进之类的东西。

[[http://www.emacswiki.org/emacs/IndentingC][C语言缩进网站]]
#+begin_src c
(setq-default c-indent-tabs-mode t     ; Pressing TAB should cause indentation
                c-indent-level 4         ; A TAB is equivilent to four spaces
                c-argdecl-indent 0       ; Do not indent argument decl's extra
                c-tab-always-indent t
                backward-delete-function nil) ; DO NOT expand tabs when deleting
  (c-add-style "my-c-style" '((c-continued-statement-offset 4))) ; If a statement continues on the next line, indent the continuation by 4
  (defun my-c-mode-hook ()
    (c-set-style "my-c-style")
    (c-set-offset 'substatement-open '0) ; brackets should be at same indentation level as the statements they open
    (c-set-offset 'inline-open '+)
    (c-set-offset 'block-open '+)
    (c-set-offset 'brace-list-open '+)   ; all "opens" should be indented by the c-indent-level
    (c-set-offset 'case-label '+))       ; indent case labels by c-indent-level, too
  (add-hook 'c-mode-hook 'my-c-mode-hook)
  (add-hook 'c++-mode-hook 'my-c-mode-hook)

#+end_src
* Emacs 一些默认快捷键
** 字母大小写转换 
#+begin_src c
capitalize-word (M-c) ;; 单词首字母转为大写
upcase-word (M-u)     ;; 整个单词转为大写
downcase-word (M-l)   ;; 整个单词转为小写（注意，这里是 META － l(* 小写字母 L)）
#+end_src

